package com.example.smellgood.provider;

import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import java.util.Date;
import com.example.smellgood.Defaults;
import static android.content.ContentResolver.SCHEME_CONTENT;
import static com.example.smellgood.Defaults.ALL_COLUMNS;
import static com.example.smellgood.Defaults.AUTOGENERATED_ID;
import static com.example.smellgood.Defaults.NO_CONTENT_OBSERVER;
import static com.example.smellgood.Defaults.NO_GROUP_BY;
import static com.example.smellgood.Defaults.NO_HAVING;
import static com.example.smellgood.Defaults.NO_NULL_COLUMN_HACK;
import static com.example.smellgood.Defaults.NO_SELECTION;
import static com.example.smellgood.Defaults.NO_SELECTION_ARGS;
import static com.example.smellgood.Defaults.NO_SORT_ORDER;
import static com.example.smellgood.Defaults.NO_TYPE;
public class NoteContentProvider extends ContentProvider {
    public static final String AUTHORITY =
            "com.example.smellgood.provider.NoteContentProvider";
    public static final Uri CONTENT_URI = new Uri.Builder()
            .scheme(SCHEME_CONTENT)
            .authority(AUTHORITY)
            .appendPath(Provider.Note.TABLE_NAME)
            .build();
    private static final int URI_MATCH_NOTES = 0;
    private static final int URI_MATCH_NOTE_BY_ID = 1;
    private static final String MIME_TYPE_NOTES =
            ContentResolver.CURSOR_DIR_BASE_TYPE + "/vnd." + AUTHORITY + "." +
                    Provider.Note.TABLE_NAME;
    private static final String MIME_TYPE_SINGLE_NOTE =
            ContentResolver.CURSOR_ITEM_BASE_TYPE + "/vnd." + AUTHORITY + "." +
                    Provider.Note.TABLE_NAME;
    private UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
    private DatabaseOpenHelper databaseHelper;
    @Override
    public boolean onCreate() {
        uriMatcher.addURI(AUTHORITY, Provider.Note.TABLE_NAME, URI_MATCH_NOTES);
        uriMatcher.addURI(AUTHORITY, Provider.Note.TABLE_NAME + "/#",
                URI_MATCH_NOTE_BY_ID);
        this.databaseHelper = new DatabaseOpenHelper(getContext());
        return true;
    }
    @Override
    public Cursor query(Uri uri, String[] projection, String selection,
                        String[] selectionArgs, String sortOrder) {
        Cursor cursor = null;
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_NOTES:
                cursor = listNotes();
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_NOTE_BY_ID:
                long id = ContentUris.parseId(uri);
                cursor = findById(id);
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            default:
                return Defaults.NO_CURSOR;
        }
    }
    private Cursor findById(long id) {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        String selection = Provider.Note._ID + "=" + id;
        return db.query(Provider.Note.TABLE_NAME, ALL_COLUMNS, selection,
                NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }
    private Cursor listNotes() {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query(Provider.Note.TABLE_NAME, ALL_COLUMNS, NO_SELECTION,
                NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }
    @Override
    public Uri insert(Uri uri, ContentValues values) {
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_NOTES:
                Uri newItemUri = saveNote(values);
                getContext().getContentResolver().notifyChange(CONTENT_URI,
                        NO_CONTENT_OBSERVER);
                return newItemUri;
            default:
                return Defaults.NO_URI;
        }
    }
    private Uri saveNote(ContentValues values) {
        ContentValues note = new ContentValues();
        note.put(Provider.Note._ID, AUTOGENERATED_ID);
        note.put(Provider.Note.NICKNAME, values.getAsString(Provider.Note.NICKNAME));
        note.put(Provider.Note.SCORE, values.getAsString(Provider.Note.SCORE));
        SQLiteDatabase db = databaseHelper.getWritableDatabase();
        long newId = db.insert(Provider.Note.TABLE_NAME, NO_NULL_COLUMN_HACK, note);
        return ContentUris.withAppendedId(CONTENT_URI, newId);
    }
    public String getScore(Uri uri, String nickname){
        String score = "";
        SQLiteDatabase db = databaseHelper.getWritableDatabase();
        score = db.toString();

        return score;
    }
    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_NOTE_BY_ID:
                long id = ContentUris.parseId(uri);
                int affectedRows = databaseHelper.getWritableDatabase()
                        .delete(Provider.Note.TABLE_NAME, Provider.Note._ID + " = " +
                                id, NO_SELECTION_ARGS);
                getContext().getContentResolver().notifyChange(CONTENT_URI,
                        NO_CONTENT_OBSERVER);
                return affectedRows;
            default:
                return 0;
        }
    }
    @Override
    public String getType(Uri uri) {
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_NOTE_BY_ID:
                return MIME_TYPE_SINGLE_NOTE;
            case URI_MATCH_NOTES:
                return MIME_TYPE_NOTES;
        }
        return NO_TYPE;
    }
    @Override
    public int update(Uri uri, ContentValues values, String selection,
                      String[] selectionArgs) {
        throw new UnsupportedOperationException("Not yet implemented");
    }
}